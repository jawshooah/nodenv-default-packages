#!/usr/bin/env bash
#
# Summary: Refresh default packages on all installed node versions
#
# Usage: nodenv default-packages install [ --all | <version>...]
#
# Install default packages on a specific version or all installed versions.

set -e
[ -n "$NODENV_DEBUG" ] && set -x

# Provide nodenv completions
if [ "$1" = --complete ]; then
  echo install
  echo list
  echo --all
  exit
fi

versions() {
  case "$1" in
    "")    nodenv-version-name                   ;; # list active version
    --all) nodenv-versions --skip-aliases --bare ;; # list all installed versions
    *)     echo "$@"                             ;; # list specified versions
  esac
}

for_versions() {
  cmd="$1"
  shift

  for v in $(versions "$@"); do
    eval "$cmd" "${v}"
  done
}

# Read package names and versions from $NODENV_ROOT/default-packages
list_default_packages() {
  [ -r "${NODENV_ROOT}/default-packages" ] || return 0

  local pkg_name pkg_version

  # strip comments and empty lines
  sed -e 's/#.*$//g' -e '/^[[:space:]]*$/d' "${NODENV_ROOT}/default-packages" |

  while IFS=" " read -r pkg_name pkg_version; do
    echo "${pkg_name}${pkg_version:+@$pkg_version}"
  done
}

npm_install() {
  local node_version=$1
  local package=$2

  NODENV_VERSION="$node_version" nodenv-exec npm install -g "$package"
}

install_default_packages() {
  local node_version="$1"
  shift

  local package

  list_default_packages |
  {
    local error
    while read -r package; do
      npm_install "$node_version" "$package" || error=true
    done

    [ -z "$error" ] || exit 1
  }
}

unset cmd

case "$1" in
  install | list ) cmd="$1"; shift ;;

  -h | --help ) nodenv-help; exit ;;

  *) nodenv-help --usage default-packages; exit 1 ;;
esac

for_versions "${cmd}_default_packages" "$@"
